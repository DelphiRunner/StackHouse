; program : simple loop 
; s := 0;
; for i=1 to 100000 do s := s + i;

; *****************************************************************************
; both i & s stored in local vars; heavy loaded instruction are used (JN)
func loop L:2 S:4  

 mov 1 .L0       ; i = 1 
 mov 0 .L1       ; s = 0
  :begin
 push .L0 100000 ; prepare data to comparison
 jn int <= :end  ; compare two integers (.L0 <= 100000) and jump to :end if condition is NOT met (JN = J as JUMP + N as NOT)
 push .L1 .L0    ; s, i on stack; double push instruction is much more fastest when used inside cycles than two single push!
 iadd            ; s + i on stack
 pop .L1         ; s = s + i; POP save value into variable and decreases stack pointer! STORE does same but don't touch stack pointer
 inc .L0 1       ; i = i + 1; it is magic instruction that directly inc local var without stack using; useful for shifting pointers!
 jump :begin     ; go to loop start
  :end
 push .L1 0      ; .L1 is result; 0 is DATA_INT directive for %printl
 call %printl    ; call system function to print .L0 (as integer!) and line feed
 ret             ; return control to caller

 end func

; *****************************************************************************
; i stored in local var; s on stack; JN replace to JZ; no need isub, just dec; backward loop!
; it is about 50% more fastest than naive loop
func loop_tricky L:1 S:4

 mov 100000 .L0  ; i = 100000 (backward loop!)
 push 0 .L0      ; s, i on stack 
  :begin
 jz :end         ; compare top of stack against 0 (as integers!) and jump to :end if condition (stack[SP] == 0) is met
                 ; JZ JNZ JLZ JGZ instructions more fastest than JN, but only used with integers
 push .L0        ; s, i on stack
 iadd            ; s + i on stack (it is new value of the summa)
 dec .L0 1       ; i = i - 1
 push .L0        ; s, i on stack
 jump :begin     ; go to loop start
  :end
 push 0          ; result already on stack so just push DATA_INT directive for %printl
 call %printl    ; call system function to print integer from stack and line feed
 ret             ; return control to caller

end func
